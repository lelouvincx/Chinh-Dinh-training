version: "3.4"
name: "db-replication"

services:
  source_db:
    image: postgres:14-alpine
    container_name: "source_db"
    ports:
      - "5432:5432"
    volumes:
      - .docker/data/postgres:/var/lib/postgresql/pgdata
      - .docker/backups/postgres:/backups
      - .docker/postgres-add-de-user.sh:/docker-entrypoint-initdb.d/postgres-add-de-user.sh
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/pgdata
    restart: unless-stopped
    networks:
      - upstream_networks
      - kafka_networks
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 10s

  adminer:
    image: adminer:standalone
    container_name: "adminer"
    ports:
      - "8080:8080"
    depends_on:
      - source_db
    networks:
      - upstream_networks
    networks:
      - upstream_networks
    restart: unless-stopped

  upstream-app:
    image: upstream-app:dev
    container_name: "upstream-app"
    ports:
      - "8501:8501"
    volumes:
      - ./app/app:/app
    env_file: .env
    restart: on-failure
    depends_on:
      - source_db
    networks:
      - upstream_networks
    networks:
      - upstream_networks
    healthcheck:
      test: curl --fail http://localhost:8501/healthz || exit 1
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 10s

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - .docker/data/zookeeper:/bitnami/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_SYNC_LIMIT=7 # How far out of date a server can be from a leader
      # - ZOO_ENABLE_PROMETHEUS_METRICS=yes
      - ZOO_LOG_LEVEL=DEBUG
    restart: unless-stopped
    networks:
      - kafka_networks

  kafka-0:
    image: bitnami/kafka:3.5
    container_name: kafka-server
    ports:
      - "9092:9092"
      - ":9093"
    volumes:
      - .docker/data/kafka-0:/bitnami/kafka
      - .docker/log/kafka-0:/tmp/kafka_mounts/logs
    env_file: .env
    environment:
      - KAFKA_CFG_NODE_ID=0
      # - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    # depends_on:
    #   - zookeeper
    networks:
      - kafka_networks
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server kafka-server:9092 || exit -1
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 15s

  kafka-1:
    image: bitnami/kafka:3.5
    container_name: kafka-1
    ports:
      - ":9092"
      - ":9093"
    volumes:
      - .docker/data/kafka-1:/bitnami/kafka
      - .docker/log/kafka-1:/tmp/kafka_mounts/logs
    env_file: .env
    environment:
      - KAFKA_CFG_NODE_ID=1
    networks:
      - kafka_networks
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server kafka-server:9092 || exit -1
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 15s

  kafka-2:
    image: bitnami/kafka:3.5
    container_name: kafka-2
    ports:
      - ":9092"
      - ":9093"
    volumes:
      - .docker/data/kafka-2:/bitnami/kafka
      - .docker/log/kafka-2:/tmp/kafka_mounts/logs
    env_file: .env
    environment:
      - KAFKA_CFG_NODE_ID=2
    networks:
      - kafka_networks
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server kafka-server:9092 || exit -1
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 15s

  kafka-connect:
    image: bitnami/kafka:3.5
    container_name: kafka-connect
    ports:
      - "8083:8083"
    volumes:
      - .docker/data/kafka-connect:/bitnami/kafka
      - ./.docker/connect-distributed.properties:/opt/bitnami/kafka/config/connect-distributed.properties
    command: /opt/bitnami/kafka/bin/connect-distributed.sh /opt/bitnami/kafka/config/connect-distributed.properties
    networks:
      - kafka_networks

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-manager-ui
    ports:
      - "8000:8080"
    env_file: .env
    networks:
      - kafka_networks
    depends_on: # WARN: Not working if kafka-0 down, but if depends on the env configs
      - kafka-0


  sink_db:
    image: mcr.microsoft.com/mssql/server:2022-CU8-ubuntu-20.04
    container_name: sink_db
    user: root
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_PID=Developer
      - MSSQL_USER=SA
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
    volumes:
      - .docker/data/mssql:/var/opt/mssql/data
      - .docker/log/mssql:/var/opt/mssql/log
      - .docker/backups/mssql:/var/opt/mssql/backup
    restart: on-failure
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "$$MSSQL_SA_PASSWORD" -Q "SELECT 1;" || exit
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

networks:
  upstream_networks:
    driver: bridge
  kafka_networks:
    driver: bridge
  downstream_networks:
    driver: bridge
