version: "3.4"
name: "db-replication"

services:
  source_db:
    image: postgres:14-alpine
    container_name: "source_db"
    ports:
      - "5432:5432"
    volumes:
      - .docker/data/postgres:/var/lib/postgresql/pgdata
      - .docker/backups/postgres:/backups
      - .docker/postgres-add-de-user.sh:/docker-entrypoint-initdb.d/postgres-add-de-user.sh
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/pgdata
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  adminer:
    image: adminer:standalone
    container_name: "adminer"
    ports:
      - "8080:8080"
    depends_on:
      - source_db
    restart: unless-stopped

  data_gen:
    image: data-generator:localdev
    container_name: "data_gen"
    ports:
      - "8501:8501"
    volumes:
      - ./app:/app
    env_file: .env
    restart: on-failure
    depends_on:
      - source_db
    healthcheck:
      test: curl --fail http://localhost:8501/healthz || exit 1
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - .docker/data/zookeeper:/bitnami/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_SYNC_LIMIT=7 # How far out of date a server can be from a leader
      # - ZOO_ENABLE_PROMETHEUS_METRICS=yes
      - ZOO_LOG_LEVEL=DEBUG
    restart: unless-stopped
    healthcheck:
      test: nc -z localhost 2181 | exit 1
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - kafka_networks

  kafka-0:
    image: bitnami/kafka:3.5
    container_name: kafka-server
    ports:
      - "9092:9092"
      - ":9093"
    volumes:
      - .docker/data/kafka-0:/bitnami/kafka
      - .docker/log/kafka-0:/tmp/kafka_mounts/logs
    environment:
      # - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    # depends_on:
    #   - zookeeper
    networks:
      - kafka_networks

  kafka-1:
    image: bitnami/kafka:3.5
    container_name: kafka-1
    ports:
      - ":9092"
      - ":9093"
    volumes:
      - .docker/data/kafka-1:/bitnami/kafka
      - .docker/log/kafka-1:/tmp/kafka_mounts/logs
    environment:
      # - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    # depends_on:
    #   - zookeeper
    networks:
      - kafka_networks

  kafka-2:
    image: bitnami/kafka:3.5
    container_name: kafka-2
    ports:
      - ":9092"
      - ":9093"
    volumes:
      - .docker/data/kafka-2:/bitnami/kafka
      - .docker/log/kafka-2:/tmp/kafka_mounts/logs
    environment:
      # - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    # depends_on:
    #   - zookeeper
    networks:
      - kafka_networks

  kafka-connect:
    image: bitnami/kafka:3.4
    container_name: kafka-connect
    ports:
      - "8083:8083"
    volumes:
      - .docker/data/kafka-connect:/bitnami/kafka
      - ./.docker/connect-distributed.properties:/opt/bitnami/kafka/config/connect-distributed.properties
    command: /opt/bitnami/kafka/bin/connect-distributed.sh /opt/bitnami/kafka/config/connect-distributed.properties
    depends_on:
      - zookeeper
      - kafka-0
    networks:
      - kafka_networks

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-manager-ui
    ports:
      - "8000:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=${KAFKA_CLUSTERS_0_NAME}
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS}
      - KAFKA_CLUSTERS_0_ZOOKEEPER=${KAFKA_CLUSTERS_0_ZOOKEEPER}
      - KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL=${KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL}
      - KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM=${KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM}
      - KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG=${KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG}
    networks:
      - kafka_networks


networks:
  kafka_networks:
    driver: bridge
